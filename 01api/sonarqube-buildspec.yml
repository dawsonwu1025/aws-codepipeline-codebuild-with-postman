version: 0.2

env:
  secrets-manager:
    Organization: prod/sonarqube:Organization
    HOST: prod/sonarqube:Host
    LOGIN: prod/sonarqube:SonarToken
    Project: prod/sonarqube:Project

phases:
  install:
    runtime-versions:
      php: 7.3
      java: corretto11
      
  pre_build:
    commands:
      - wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
      - unzip sonar-scanner-cli-4.8.0.2856-linux.zip
      - mv sonar-scanner-4.8.0.2856-linux /opt/sonar-scanner
      - chmod -R 775 /opt/sonar-scanner
      - export PATH=$PATH:/opt/sonar-scanner/bin/
      - echo $PATH
      - echo "Stage pre_build completed"
  build:
    commands:
      - echo $CODEBUILD_SRC_DIR
      - /opt/sonar-scanner/bin/sonar-scanner -Dsonar.login=$LOGIN -Dsonar.host.url=$HOST -Dsonar.projectKey=$Project -Dsonar.organization=$Organization -Dsonar.scm.provider=git> sonarqube_scanreport.json
      - echo "Code Review stage completed"
      - cat sonarqube_scanreport.json
      
  post_build:
    commands:
      - sonar_link=$(cat sonarqube_scanreport.json | egrep -o "you can browse http://[^, ]+")
      - echo $sonar_link
      - sonar_task_id=$(cat sonarqube_scanreport.json | egrep -o "task\?id=[^ ]+" | cut -d'=' -f2)
      - echo $sonar_task_id
      
      # Allow time for SonarQube background task to complete
      - |
        stat="PENDING";
        while [ "$stat" != "SUCCESS" ]; do
          if [ $stat = "FAILED" ] || [ $stat = "CANCELLED" ]; then
            echo "SonarQube task $sonar_task_id failed";
            exit 1;
          fi
          stat=$(curl -u $LOGIN $HOST/api/ce/task\?id=$sonar_task_id | jq -r '.task.status');
          sleep 5;
        done
      - sonar_analysis_id=$(curl -u $LOGIN $HOST/api/ce/task\?id=$sonar_task_id | jq -r '.task.analysisId')
      - quality_status=$(curl -u $LOGIN $HOST/api/qualitygates/project_status\?analysisId=$sonar_analysis_id | jq -r '.projectStatus.status')
      - SCAN_RESULT=$(curl -o sonarqube_scanreport.json -u $LOGIN $HOST/api/issues/search?createdAfter=2022-12-20&componentKeys=devsecops&severities=CRITICAL,BLOCKER&languages=php&types=VULNERABILITY&onComponentOnly=true)
      - |
        jq "{ \"messageType\": \"CodeScanReport\", \"reportType\": \"SONAR-QUBE\", \
        \"createdAt\": $(date +\"%Y-%m-%dT%H:%M:%S.%3NZ\"), \"source_repository\": env.CODEBUILD_SOURCE_REPO_URL, \
        \"source_branch\": env.CODEBUILD_SOURCE_VERSION, \
        \"build_id\": env.CODEBUILD_BUILD_ID, \
        \"source_commitid\": env.CODEBUILD_RESOLVED_SOURCE_VERSION, \
        \"report\": . }" sonarqube_scanreport.json > payload.json
      - |
        if [ $quality_status = "ERROR" ] || [ $quality_status = "WARN" ]; then
          aws lambda invoke --function-name ImportVulToSecurityHub --payload file://payload.json sonarqube_scan_report.json && echo "LAMBDA_SUCCEDED" || echo "LAMBDA_FAILED";
          echo "quality_status == ERROR or WARN"
          exit 1;
        elif [ $quality_status = "OK" ]; then
          echo "quality_status == OK "
        else
          echo "quality_status == unexpected"
          exit 1;
        fi

artifacts:
  type: zip
  files: '**/*'
